<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.geeklog.mapper.CommentMapper" >
  <resultMap id="BaseResultMap" type="com.geeklog.domain.Comment" >
    <id column="comment_id" property="commentId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="root_id" property="rootId" jdbcType="INTEGER" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="CommentDtoMap" type="com.geeklog.dto.CommentDto" extends="BaseResultMap">
    <result column="from_user_nickname" property="fromUserNickname" jdbcType="VARCHAR" />
    <result column="from_user_avatar" property="fromUserAvatar" jdbcType="VARCHAR" />
    <result column="to_user_nickname" property="toUserNickname" jdbcType="VARCHAR" />
    <result column="to_user_avatar" property="toUserAvatar" jdbcType="VARCHAR" />
    <result column="title" property="articleTitle" jdbcType="VARCHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.geeklog.domain.Comment" useGeneratedKeys="true" keyProperty="commentId">
    insert into comment (comment_id, user_id, article_id, 
      content, parent_id, root_id, 
      created_at)
    values (#{commentId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{articleId,jdbcType=INTEGER}, 
      #{content,jdbcType=VARCHAR}, #{parentId,jdbcType=INTEGER}, #{rootId,jdbcType=INTEGER}, 
      #{createdAt,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.geeklog.domain.Comment" >
    update comment
    <set>
      <if test="userId != null">
        user_id = #{userId},
      </if>
      <if test="articleId != null">
        article_id = #{articleId},
      </if>
      <if test="content != null">
        content = #{content},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId},
      </if>
      <if test="rootId != null">
        root_id = #{rootId},
      </if>
    </set>
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select comment_id, user_id, article_id, content, parent_id, root_id, created_at
    from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select comment_id, user_id, article_id, content, parent_id, root_id, created_at
    from comment
  </select>
  <select id="queryNumOfComments" resultType="int">
    SELECT count(1)
    FROM comment
    <where>
      <if test="userId != null">
        and user_id = #{userId}
      </if>
      <if test="articleId != null">
        and article_id = #{articleId}
      </if>
      <if test="content != null">
        and content like concat('%', #{content}, '%')
      </if>
    </where>
  </select>

  <select id="queryNumOfRoot" resultType="int">
    SELECT count(1)
    FROM comment
    <where>
      <if test="userId != null">
        and user_id = #{userId}
      </if>
      <if test="articleId != null">
        and article_id = #{articleId}
      </if>
      <if test="content != null">
        and content like concat('%', #{content}, '%')
      </if>
      and parent_id is NULL
    </where>
  </select>
  <select id="queryNumOfReply" resultType="int">
    SELECT count(1)
    FROM comment
    <where>
      <if test="userId != null">
        and user_id = #{userId}
      </if>
      <if test="articleId != null">
        and article_id = #{articleId}
      </if>
      <if test="content != null">
        and content like concat('%', #{content}, '%')
      </if>
      and parent_id IS NOT NULL
      and root_id = #{rootId}
    </where>
  </select>

  <select id="queryPaging" resultMap="BaseResultMap">
    SELECT comment_id, user_id, article_id, content, parent_id, root_id, created_at
    FROM comment
    <where>
      <if test="comment.userId != null">
        and user_id = #{comment.userId}
      </if>
      <if test="comment.articleId != null">
        and article_id = #{comment.articleId}
      </if>
      <if test="comment.content != null">
        and content like concat('%', #{comment.content}, '%')
      </if>
    </where>
    ORDER BY created_at
    LIMIT #{rowIndex}, #{pageSize}
  </select>
  <select id="queryPagingRoot" resultMap="CommentDtoMap">
    SELECT A.comment_id, A.user_id, A.article_id, A.content, A.parent_id, A.root_id, A.created_at,
    A.nickname as from_user_nickname, A.avatar as from_user_avatar,
    u2.nickname as to_user_nickname, u2.avatar as to_user_avatar, A.title
    FROM
    (SELECT c.comment_id, c.user_id, c.article_id, c.content, c.parent_id, c.root_id, c.created_at,
    u1.nickname, u1.avatar,a.title
    FROM comment c
    JOIN user u1
    on u1.user_id = c.user_id
    join article a
    on c.article_id = a.article_id
    <where>
      <if test="comment.userId != null">
        and c.user_id = #{comment.userId}
      </if>
      <if test="comment.articleId != null">
        and c.article_id = #{comment.articleId}
      </if>
      <if test="comment.content != null">
        and c.content like concat('%', #{comment.content}, '%')
      </if>
      and parent_id is NULL
    </where>) AS A
    left join comment c2
    ON c2.comment_id= A.parent_id
    left join user u2
    on u2.user_id = c2.user_id
    ORDER BY created_at
    LIMIT #{rowIndex}, #{pageSize}
  </select>
  <select id="queryPagingReply" resultMap="CommentDtoMap">
    SELECT A.comment_id, A.user_id, A.article_id, A.content, A.parent_id, A.root_id, A.created_at,
    A.nickname as from_user_nickname, A.avatar as from_user_avatar,
    u2.nickname as to_user_nickname, u2.avatar as to_user_avatar, A.title
    FROM
    (SELECT c.comment_id, c.user_id, c.article_id, c.content, c.parent_id, c.root_id, c.created_at,
    u1.nickname, u1.avatar,a.title
    FROM comment c
    JOIN user u1
    on u1.user_id = c.user_id
    join article a
    on c.article_id = a.article_id
    <where>
      <if test="comment.userId != null">
        and c.user_id = #{comment.userId}
      </if>
      <if test="comment.articleId != null">
        and c.article_id = #{comment.articleId}
      </if>
      <if test="comment.content != null">
        and c.content like concat('%', #{comment.content}, '%')
      </if>
      and parent_id IS NOT NULL
      and root_id = #{comment.rootId}
    </where>
    ) AS A
    left join comment c2
    ON c2.comment_id= A.parent_id
    left join user u2
    on u2.user_id = c2.user_id
    ORDER BY created_at
    LIMIT #{rowIndex}, #{pageSize}
  </select>
  <select id="queryPagingDESC" resultMap="BaseResultMap">
    SELECT comment_id, user_id, article_id, content, parent_id, root_id, created_at
    FROM comment
    <where>
      <if test="comment.userId != null">
        and user_id = #{comment.userId}
      </if>
      <if test="comment.articleId != null">
        and article_id = #{comment.articleId}
      </if>
      <if test="comment.content != null">
        and content like concat('%', #{comment.content}, '%')
      </if>
    </where>
    ORDER BY created_at DESC
    LIMIT #{rowIndex}, #{pageSize}
  </select>
</mapper>