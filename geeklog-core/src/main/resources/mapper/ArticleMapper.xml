<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.geeklog.mapper.ArticleMapper" >
  <resultMap id="BaseResultMap" type="com.geeklog.domain.Article" >
    <id column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="created_at" property="createdAt"  />
    <result column="modified_at" property="modifiedAt" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="category_id" property="categoryId" jdbcType="INTEGER" />
    <result column="tags" property="tags" jdbcType="VARCHAR" />
    <result column="display" property="display" jdbcType="BIT" />
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <resultMap id="articleDto" type="com.geeklog.dto.ArticleDto" extends="BaseResultMap">
    <result column="star_count" property="starCount" jdbcType="INTEGER" />
    <result column="collect_count" property="collectCount" jdbcType="INTEGER" />
    <result column="comment_count" property="commentCount" jdbcType="INTEGER" />
    <result column="count" property="count" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="category_name" property="categoryName" jdbcType="VARCHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from article
    where article_id = #{articleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.geeklog.domain.Article" useGeneratedKeys="true" keyProperty="articleId">
    insert into article (article_id, title, created_at, 
      modified_at, user_id, category_id, 
      tags, display, content
      )
    values (#{articleId,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{createdAt},
      #{modifiedAt}, #{userId,jdbcType=INTEGER}, #{categoryId,jdbcType=INTEGER},
      #{tags,jdbcType=VARCHAR}, #{display,jdbcType=BIT}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.geeklog.domain.Article" >
    update article
    <set>
      <if test="title != null">
        title = #{title},
      </if>
      <if test="modifiedAt != null">
        modified_at = #{modifiedAt},
      </if>
      <if test="userId != null">
        user_id = #{userId},
      </if>
      <if test="categoryId != null">
        category_id = #{categoryId},
      </if>
      <if test="tags != null">
        tags = #{tags},
      </if>
      <if test="display != null">
        display = #{display},
      </if>
      <if test="content != null">
        content = #{content},
      </if>
    </set>
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select article_id, title, created_at, modified_at, user_id, category_id, tags, display, 
    content
    from article
    where article_id = #{articleId,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select article_id, title, created_at, modified_at, user_id, category_id, tags, display, 
    content
    from article
  </select>
  <select id="queryNumOfArticles" resultType="int">
    SELECT count(1)
    FROM article
    <where>
      <if test="title != null">
        and title like concat('%', #{title}, '%')
      </if>
      <if test="tags != null">
        and tags like concat('%', #{tags}, '%')
      </if>
      <if test="categoryId != null">
        and category_id = #{categoryId}
      </if>
      <if test="userId != null">
        and user_id = #{userId}
      </if>
      <if test="display != null">
        and display = #{display}
      </if>
    </where>
  </select>
  <select id="queryPaging" resultMap="BaseResultMap">
    SELECT article_id, title, created_at, modified_at, user_id, category_id, tags, display,
    content
    FROM article
    <where>
      <if test="article.title != null">
        and title like concat('%', #{article.title}, '%')
      </if>
      <if test="article.tags != null">
        and tags like concat('%', #{article.tags}, '%')
      </if>
      <if test="article.categoryId != null">
        and category_id = #{article.categoryId}
      </if>
      <if test="article.userId != null">
        and user_id = #{article.userId}
      </if>
      <if test="article.display != null">
        and display = #{article.display}
      </if>
    </where>
    ORDER BY created_at DESC
    LIMIT #{rowIndex}, #{pageSize}
  </select>

  <select id="queryPagingOrder" resultMap="articleDto">
    select  a.article_id, a.title, a.created_at, a.modified_at,
    a.user_id, a.category_id, a.tags, a.display, a.content,
    cate.`name` as category_name,
    u.username, u.nickname,
    collect_count, comment_count, star_count,
    ifNull(collect_count,0)+ifNull(comment_count,0)+ifNull(star_count,0) as count
    from
    (select a.*, count(co.article_id) as collect_count from article a  left JOIN collect co on a.article_id=co.article_id group by a.article_id)
    as A
    LEFT JOIN
    (select a.article_id, count(c.article_id) as comment_count from article a  left JOIN comment c on a.article_id=c.article_id group by a.article_id)
    as B
    on A.article_id = B.article_id
    LEFT JOIN
    (select a.article_id, count(s.article_id) as star_count from article a  left JOIN star s on a.article_id=s.article_id group by a.article_id)
    as C
    on B.article_id = C.article_id
    JOIN user u
    on a.user_id = u.user_id
    JOIN category cate
    on a.category_id = cate.category_id
    <where>
      <if test="article.title != null">
        and a.title like concat('%', #{article.title}, '%')
      </if>
      <if test="article.tags != null">
        and a.tags like concat('%', #{article.tags}, '%')
      </if>
      <if test="article.categoryId != null">
        and a.category_id = #{article.categoryId}
      </if>
      <if test="article.userId != null">
        and a.user_id = #{article.userId}
      </if>
      <if test="article.display != null">
        and a.display = #{article.display}
      </if>
    </where>
    <if test="orderByTime == true">
      ORDER BY a.created_at DESC
    </if>
    <if test="orderByTime == false">
      ORDER BY `count` DESC
    </if>
    LIMIT #{rowIndex}, #{pageSize}
  </select>



</mapper>